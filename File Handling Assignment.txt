1. What is Input and Output Stream in Java?
Ans: A stream can be defined as a sequence of data. The InputStream is used to read data from a source and the Output Stream is used for writing data to a destinationP


2. What are the methods of OutputStream ?
Ans : 
write() - writes the specified byte to the output streamO write(byte[] array) - writes the bytes from the specified array to the output streamO L flush() - forces to write all data present in the output stream to the destinationO L close() - closes the output stream.


3. What is serialization in Java?
Ans: Serialization is the process of converting an object into a stream of bytes to transfer it over a network or to store it in a file or database. In Java, serialization is done by implementing the Serializable interface.


4. What is the Serializable interface in Java?
Ans: The Serializable interface in Java is a marker interface that has no methods. It is used to mark classes that can be serialized, meaning their object instances can be converted into a stream of bytes.


5. What is deserialization in Java?
Ans: Deserialization is the process of converting a stream of bytes back into an object instance. This is done after an object has been serialized.


6. How is serialization achieved in Java?
Ans: Serialization is achieved in Java by implementing the Serializable interface. When an object is serialized, its state is converted into a stream of bytes, which can then be transferred over a network or stored in a file or database.


7. How is deserialization achieved in Java?
Ans: Deserialization is achieved in Java by reading a stream of bytes and using them to recreate the original object instance. This is done by calling the readMbject() method of an ObjectInputStream instance.


8. How can you avoid certain member variables of class from getting Serialized?
Ans: Mark member variables as static or transient, and those member variables will no more be a part of Serialization.


9. What classes are available in the Java IO File Classes API?
Ans: The following classes are available in the Java IM API and are important to work with files in JavaP File RandomAccessFile FileInputStream FileReader FileMutputStream FileWriter.






10. What is Difference between Externalizable and Serialization interface ?
Ans : 
SERIALIZATION
The process of writing the state of an object to a file is called serialization, but strictly speaking, it is the process of converting an object from java supported form into a file-supported form or network-supported form by using fileOutputStream and objectOutputStream classes we can implement serialization. 
But we can serialize only serializable objects. An object is said to be serializable if and only if the corresponding class implements a Serializable interface. Serializable interface is present in Java.io package, and it doesn’t contain any method and hence it is a marker interface. If we are trying to serializable a non-serializable object then we will get Runtime Exception saying notSerializableException. 
EXTERNALIZABLE
In serialization, everything is taken care of by JVM and the programmer doesn’t have any control. In serialization, it is always possible to solve the total object to file, and it is not possible to save part of the object which may create performance problems. To overcome this problem we should go for externalization.
The main advantage of Externalizable over serialization is, everything is taken care of by the programmer and JVM doesn’t have any control. Based on our requirements we can save either the total object or part of the object which improves the performance of the system. To provide the generalizable ability for any java object, it’s a mandate for the corresponding class to implement a generalizable interface.